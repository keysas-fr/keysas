; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppId "5181AF84-A8FF-4E95-AD67-46E5AA120C02"
#define AppName "Keysas USB Firewall"
#define AppVersion "1.0"
#define AppPublisher "Keysas"
#define AppURL "https://keysas.fr"
#define AgentName "Keysas Service"
#define FsFilter "KeysasMinifilter"
#define OutputFilename "keysas"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={#AppId}
AppName={#AppName}
AppVersion={#AppVersion}
AppVerName={#AppName} {#AppVersion}
AppPublisher={#AppPublisher}
AppPublisherURL={#AppURL}
AppSupportURL={#AppURL}
AppUpdatesURL={#AppURL}
DefaultDirName={autopf}\{#AppName}
DefaultGroupName={#AppName}
PrivilegesRequired=admin
OutputDir==.
DisableProgramGroupPage=yes
OutputBaseFilename={#OutputFilename}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ArchitecturesInstallIn64BitMode=x64 arm64 ia64
RestartIfNeededByRun=yes


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"; LicenseFile: license_en.txt
Name: "french"; MessagesFile: "compiler:Languages\French.isl"; LicenseFile: license_fr.txt

[CustomMessages]
english.SecurityConfigInfo=Keysas Firewall security configuration
english.EnterConfig=Select security policy
english.DisableUnsignedUsb=Allow all unsigned USB devices
english.AllowUserUsbAuthorization=Authorize user to manualy approve unsigned USB devices
english.AllowUserFileRead=Authorize user to manualy approve unchecked file read
english.AllowUserFileWrite=Authorize user to modify or create file
english.CertifConfigInfo=Select USB CA certificates
english.EnterCertif=Enter path to USB CA certificates
english.CertifCLLocation=Path to ED25519 certificate
english.CertifPQLocation=Path to Ml-Dsa certificate
french.SecurityConfigInfo=Configuration du pare-feu Keysas
french.EnterConfig=D�finissez la politique de s�curit� du pare-feu
french.DisableUnsignedUsb=Autorisez toutes les cl�s USB non sign�es
french.AllowUserUsbAuthorization=Autorisez l'utilisateur � approuver manuellement les cl�s USB non sign�es
french.AllowUserFileRead=Autorisez l'utilisateur �approuver manuellement la lecture des fichiers non v�rifi�s
french.AllowUserFileWrite=Autorisez l'utilisateur �modifier ou cr�er des fichiers sur les cl�s USB 
french.CertifConfigInfo=S�lectionner les certificats de la CA USB
french.EnterCertif=Entrer le chemin vers les certificats
french.CertifCLLocation=Chemin vers le certificat ED25519
french.CertifPQLocation=Chemin vers le certificat Ml-Dsa

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
; Service executable
Source: "..\daemon\target\debug\keysas-usbfilter-daemon.exe"; DestDir: "{app}\{#AgentName}\Service"; Flags: ignoreversion
; Minifilter driver executable and files - Change to Release when the driver is signed
Source: "..\minifilter\x64\Debug\{#FsFilter}\*"; DestDir:"{app}\{#AgentName}\Minifilter"; Flags: ignoreversion
Source: "..\minifilter\x64\Debug\{#FsFilter}\{#FsFilter}.sys"; DestDir:"{sys}\drivers\"; Flags: ignoreversion 64bit
; Tray app installers - Check that version number match the one supplied in tauri configuration file when building the app
Source: "..\tray-app\src-tauri\target\release\bundle\msi\keysas-tray-app_0.1.0_x64_fr-FR.msi"; DestDir: "{app}\{#AgentName}\TrayApp"; Flags: deleteafterinstall ignoreversion
Source: "..\tray-app\src-tauri\target\release\bundle\msi\keysas-tray-app_0.1.0_x64_en-US.msi"; DestDir: "{app}\{#AgentName}\TrayApp"; Flags: deleteafterinstall ignoreversion
; Keysas logo
Source: ".\logo-keysas-short.ico"; DestDir: "{app}\{#AgentName}"; Flags: ignoreversion
; USB Certificate Authority certificates, supplied by the user
Source: {code:GetCLCertif}; DestDir: "{app}\{#AgentName}\config"; Flags: external
Source: {code:GetPQCertif}; DestDir: "{app}\{#AgentName}\config"; Flags: external

[Code]
var
  SecuConfigPage: TInputOptionWizardPage;
  CertifPage: TInputFileWizardPage;
 
procedure InitializeWizard;
begin
    // Security Configuration Page
    SecuConfigPage := CreateInputOptionPage(wpSelectComponents, ExpandConstant('{cm:SecurityConfigInfo}'), ExpandConstant('{cm:EnterConfig}'), '', false, false);

    SecuConfigPage.Add(ExpandConstant('{cm:DisableUnsignedUsb}'));
    SecuConfigPage.Add(ExpandConstant('{cm:AllowUserUsbAuthorization}'));
    SecuConfigPage.Add(ExpandConstant('{cm:AllowUserFileRead}'));
    SecuConfigPage.Add(ExpandConstant('{cm:AllowUserFileWrite}'));

    // Select admin certificates
    CertifPage := CreateInputFilePage(SecuConfigPage.ID, ExpandConstant('{cm:CertifConfigInfo}'), '', ExpandConstant('{cm:EnterCertif}'));

    CertifPage.Add(ExpandConstant('{cm:CertifCLLocation}'), 'All files', '.pem');
    CertifPage.Add(ExpandConstant('{cm:CertifPQLocation}'), 'All files', '.pem'); 
end;

{ TODO - Add configuration check between parameters}

function GetConfigUnsignedUsb(Param: String): String;
var
    Config: integer;

begin
    if (SecuConfigPage.Values[0]) then
        Config := 1
    else
        Config := 0;
    Result := IntToStr(Config);
end;

function GetConfigUsbAuthorization(Param: String): String;     
var
    Config: integer;

begin
    if (SecuConfigPage.Values[1]) then
        Config := 1
    else
        Config := 0;
    Result := IntToStr(Config);
end;

function GetConfigReadAuthorization(Param: String): String; 
var
    Config: integer;

begin
    if (SecuConfigPage.Values[2]) then
        Config := 1
    else
        Config := 0;
    Result := IntToStr(Config);
end;

function GetConfigWriteAuthorization(Param: String): String;   
var
    Config: integer;

begin
    if (SecuConfigPage.Values[3]) then
        Config := 1
    else
        Config := 0;
    Result := IntToStr(Config);
end;

function GetCLCertif(Param: String): String;
begin
    Result := CertifPage.Values[0];
end;

function GetPQCertif(Param: String): String;
begin
    Result := CertifPage.Values[1];
end;

[Icons]
Name: "{autoprograms}\Keysas USB Firewall"; Filename: "{app}\keysas-usbfilter-daemon.exe"
Name: "{autodesktop}\Keysas USB Firewall"; Filename: "{app}\keysas-usbfilter-daemon.exe"; IconFilename: ".\logo-keysas-short.ico"; Tasks: desktopicon

[Registry]
; Register Keysas Service as event source to the Event logger
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\EventLog\Application\{#AgentName}"; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\EventLog\Application\{#AgentName}"; ValueType: string; ValueName: "EventMessageFile"; ValueData: {app}; Flags: uninsdeletekey
; Save security configuration for Keysas Service
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\{#AgentName}\config"; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\{#AgentName}\config"; ValueType: dword; ValueName: "DisableUnsignedUsb"; ValueData: {code:GetConfigUnsignedUsb}; Flags: uninsdeletekey
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\{#AgentName}\config"; ValueType: dword; ValueName: "AllowUserUsbAuthorization"; ValueData: {code:GetConfigUsbAuthorization}; Flags: uninsdeletekey
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\{#AgentName}\config"; ValueType: dword; ValueName: "AllowUserFileRead"; ValueData: {code:GetConfigReadAuthorization}; Flags: uninsdeletekey
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\{#AgentName}\config"; ValueType: dword; ValueName: "AllowUserFileWrite"; ValueData: {code:GetConfigWriteAuthorization}; Flags: uninsdeletekey    
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\{#AgentName}\config"; ValueType: string; ValueName: "UsbCaClCert"; ValueData: {code:GetCLCertif}; Flags: uninsdeletekey 
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\{#AgentName}\config"; ValueType: string; ValueName: "UsbCaPqCert"; ValueData: {code:GetPQCertif}; Flags: uninsdeletekey
; Register tray app to automaticaly run at startup
Root: HKCU; Subkey: "Software\Microsoft\Windows\CurrentVersion\Run"; ValueType: string; ValueName: "Keysas-TrayApp"; ValueData: "C:\Programmes\keysas-tray-app\keysas-tray-app.exe"; Flags: uninsdeletekey

[Run]
; Run Minifilter inf file and install it in system directory
Filename: "RUNDLL32.EXE"; Parameters: "SETUPAPI.DLL,InstallHinfSection DefaultInstall 132 {app}\{#AgentName}\Minifilter\{#FsFilter}.inf"; Flags: runhidden
Filename: "xcopy.exe"; Parameters: """C:\Windows\SysWOW64\drivers\{#FsFilter}.sys"" ""C:\Windows\System32\drivers"" /y"; Flags: runhidden
; Install Keysas service and start it
Filename: {sys}\sc.exe; Parameters: "create ""{#AgentName}"" binPath= ""{app}\{#AgentName}\Service\keysas-usbfilter-daemon.exe"""; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "config ""{#AgentName}"" depend= {#FsFilter}"; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "config ""{#AgentName}"" start= delayed-auto"; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "start ""{#FsFilter}"""; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "start ""{#AgentName}"""; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "query ""{#AgentName}"""; Flags: runhidden
; Install tray app
Filename: "msiexec.exe"; Parameters: "/i ""{app}\{#AgentName}\TrayApp\keysas-tray-app_0.1.0_x64_en-US.msi"" /qb"; WorkingDir: "{app}\{#AgentName}\TrayApp"; Languages: english
Filename: "msiexec.exe"; Parameters: "/i ""{app}\{#AgentName}\TrayApp\keysas-tray-app_0.1.0_x64_fr-FR.msi"" /qb"; WorkingDir: "{app}\{#AgentName}\TrayApp"; Languages: french

[UninstallRun]
Filename: {sys}\sc.exe; Parameters: "stop ""{#AgentName}"""; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "stop ""{#FsFilter}"""; Flags: runhidden
Filename: "RUNDLL32.EXE"; Parameters: "SETUPAPI.DLL,InstallHinfSection DefaultUninstall 132 {app}\{#AgentName}\Minifilter\{#FsFilter}.inf"; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "delete ""{#AgentName}"""; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "delete {#FsFilter}"; Flags: runhidden
Filename: {sys}\del.exe; Parameters: """C:\Windows\System32\drivers\{#FsFilter}.sys"""
